  #pragma once
  #include "Protocol.pb.h"
  
  using PacketHandlerFunc = std::function<bool(PacketSessionRef&, BYTE*, int32)>;
  extern PacketHandlerFunc GPacketHandler[UINT16_MAX];
  
  extern string GSession;
  extern int32 GRoomNum;
  
  enum : uint16
  {
  	PKT_C_SIGNUP = 1000,
  	PKT_S_SIGNUP = 1001,
  	PKT_C_LOGIN = 1002,
  	PKT_S_LOGIN = 1003,
  	PKT_C_CREATE_ROOM = 1004,
  	PKT_S_CREATE_ROOM = 1005,
  	PKT_C_ENTER_ROOM = 1006,
  	PKT_S_ENTER_ROOM = 1007,
  	PKT_C_READY = 1008,
  	PKT_S_READY = 1009,
  	PKT_C_START = 1010,
  	PKT_S_START = 1011,
  	PKT_C_MOVE = 1012,
  	PKT_S_MOVE = 1013,
  	PKT_C_ATTACK = 1014,
  	PKT_S_ATTACK = 1015,
  	PKT_C_ATTACKED = 1016,
  	PKT_S_ATTACKED = 1017,
  	PKT_S_LOSE = 1018,
  	PKT_S_WIN = 1019,
  };
  
  // Custom Handlers
  bool Handle_INVALID(PacketSessionRef& session, BYTE* buffer, int32 len);
  bool Handle_C_SIGNUP(PacketSessionRef& session, Protocol::C_SIGNUP& pkt);
  bool Handle_C_LOGIN(PacketSessionRef& session, Protocol::C_LOGIN& pkt);
  bool Handle_C_CREATE_ROOM(PacketSessionRef& session, Protocol::C_CREATE_ROOM& pkt);
  bool Handle_C_ENTER_ROOM(PacketSessionRef& session, Protocol::C_ENTER_ROOM& pkt);
  bool Handle_C_READY(PacketSessionRef& session, Protocol::C_READY& pkt);
  bool Handle_C_START(PacketSessionRef& session, Protocol::C_START& pkt);
  bool Handle_C_MOVE(PacketSessionRef& session, Protocol::C_MOVE& pkt);
  bool Handle_C_ATTACK(PacketSessionRef& session, Protocol::C_ATTACK& pkt);
  bool Handle_C_ATTACKED(PacketSessionRef& session, Protocol::C_ATTACKED& pkt);
  
  class ClientPacketHandler
  {
  public:
  	static void Init()
  	{
  		for (int32 i = 0; i < UINT16_MAX; i++)
  			GPacketHandler[i] = Handle_INVALID;
  		GPacketHandler[PKT_C_SIGNUP] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_SIGNUP>(Handle_C_SIGNUP, session, buffer, len); };
  		GPacketHandler[PKT_C_LOGIN] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_LOGIN>(Handle_C_LOGIN, session, buffer, len); };
  		GPacketHandler[PKT_C_CREATE_ROOM] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_CREATE_ROOM>(Handle_C_CREATE_ROOM, session, buffer, len); };
  		GPacketHandler[PKT_C_ENTER_ROOM] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_ENTER_ROOM>(Handle_C_ENTER_ROOM, session, buffer, len); };
  		GPacketHandler[PKT_C_READY] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_READY>(Handle_C_READY, session, buffer, len); };
  		GPacketHandler[PKT_C_START] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_START>(Handle_C_START, session, buffer, len); };
  		GPacketHandler[PKT_C_MOVE] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_MOVE>(Handle_C_MOVE, session, buffer, len); };
  		GPacketHandler[PKT_C_ATTACK] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_ATTACK>(Handle_C_ATTACK, session, buffer, len); };
  		GPacketHandler[PKT_C_ATTACKED] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_ATTACKED>(Handle_C_ATTACKED, session, buffer, len); };
  	}
  
  	static bool HandlePacket(PacketSessionRef& session, BYTE* buffer, int32 len)
  	{
  		PacketHeader* header = reinterpret_cast<PacketHeader*>(buffer);
  		return GPacketHandler[header->id](session, buffer, len);
  	}
  	static SendBufferRef MakeSendBuffer(Protocol::S_SIGNUP& pkt) { return MakeSendBuffer(pkt, PKT_S_SIGNUP); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_LOGIN& pkt) { return MakeSendBuffer(pkt, PKT_S_LOGIN); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_CREATE_ROOM& pkt) { return MakeSendBuffer(pkt, PKT_S_CREATE_ROOM); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_ENTER_ROOM& pkt) { return MakeSendBuffer(pkt, PKT_S_ENTER_ROOM); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_READY& pkt) { return MakeSendBuffer(pkt, PKT_S_READY); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_START& pkt) { return MakeSendBuffer(pkt, PKT_S_START); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_MOVE& pkt) { return MakeSendBuffer(pkt, PKT_S_MOVE); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_ATTACK& pkt) { return MakeSendBuffer(pkt, PKT_S_ATTACK); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_ATTACKED& pkt) { return MakeSendBuffer(pkt, PKT_S_ATTACKED); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_LOSE& pkt) { return MakeSendBuffer(pkt, PKT_S_LOSE); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_WIN& pkt) { return MakeSendBuffer(pkt, PKT_S_WIN); }
  
  private:
  	template<typename PacketType, typename ProcessFunc>
  	static bool HandlePacket(ProcessFunc func, PacketSessionRef& session, BYTE* buffer, int32 len)
  	{
  		PacketType pkt;
  		if (pkt.ParseFromArray(buffer + sizeof(PacketHeader), len - sizeof(PacketHeader)) == false)
  			return false;
  
  		return func(session, pkt);
  	}
  
  	template<typename T>
  	static SendBufferRef MakeSendBuffer(T& pkt, uint16 pktId)
  	{
  		const uint16 dataSize = static_cast<uint16>(pkt.ByteSizeLong());
  		const uint16 packetSize = dataSize + sizeof(PacketHeader);
  
  		SendBufferRef sendBuffer = GSendBufferManager->Open(packetSize);
  		PacketHeader* header = reinterpret_cast<PacketHeader*>(sendBuffer->Buffer());
  		header->size = packetSize;
  		header->id = pktId;
  		ASSERT_CRASH(pkt.SerializeToArray(&header[1], dataSize));
  		sendBuffer->Close(packetSize);
  
  		return sendBuffer;
  	}
  };
  #pragma once
  #include "Protocol.pb.h"
  
  using PacketHandlerFunc = std::function<bool(PacketSessionRef&, BYTE*, int32)>;
  extern PacketHandlerFunc GPacketHandler[UINT16_MAX];
  
  extern string GSession;
  extern int32 GRoomNum;
  
  enum : uint16
  {
  	PKT_C_SIGNUP = 1000,
  	PKT_S_SIGNUP = 1001,
  	PKT_C_LOGIN = 1002,
  	PKT_S_LOGIN = 1003,
  	PKT_C_CREATE_ROOM = 1004,
  	PKT_S_CREATE_ROOM = 1005,
  	PKT_C_ENTER_ROOM = 1006,
  	PKT_S_ENTER_ROOM = 1007,
  	PKT_C_READY = 1008,
  	PKT_S_READY = 1009,
  	PKT_C_START = 1010,
  	PKT_S_START = 1011,
  	PKT_C_MOVE = 1012,
  	PKT_S_MOVE = 1013,
  	PKT_C_ATTACK = 1014,
  	PKT_S_ATTACK = 1015,
  	PKT_C_ATTACKED = 1016,
  	PKT_S_ATTACKED = 1017,
  	PKT_S_LOSE = 1018,
  	PKT_S_WIN = 1019,
  };
  
  // Custom Handlers
  bool Handle_INVALID(PacketSessionRef& session, BYTE* buffer, int32 len);
  bool Handle_S_SIGNUP(PacketSessionRef& session, Protocol::S_SIGNUP& pkt);
  bool Handle_S_LOGIN(PacketSessionRef& session, Protocol::S_LOGIN& pkt);
  bool Handle_S_CREATE_ROOM(PacketSessionRef& session, Protocol::S_CREATE_ROOM& pkt);
  bool Handle_S_ENTER_ROOM(PacketSessionRef& session, Protocol::S_ENTER_ROOM& pkt);
  bool Handle_S_READY(PacketSessionRef& session, Protocol::S_READY& pkt);
  bool Handle_S_START(PacketSessionRef& session, Protocol::S_START& pkt);
  bool Handle_S_MOVE(PacketSessionRef& session, Protocol::S_MOVE& pkt);
  bool Handle_S_ATTACK(PacketSessionRef& session, Protocol::S_ATTACK& pkt);
  bool Handle_S_ATTACKED(PacketSessionRef& session, Protocol::S_ATTACKED& pkt);
  bool Handle_S_LOSE(PacketSessionRef& session, Protocol::S_LOSE& pkt);
  bool Handle_S_WIN(PacketSessionRef& session, Protocol::S_WIN& pkt);
  
  class ServerPacketHandler
  {
  public:
  	static void Init()
  	{
  		for (int32 i = 0; i < UINT16_MAX; i++)
  			GPacketHandler[i] = Handle_INVALID;
  		GPacketHandler[PKT_S_SIGNUP] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_SIGNUP>(Handle_S_SIGNUP, session, buffer, len); };
  		GPacketHandler[PKT_S_LOGIN] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_LOGIN>(Handle_S_LOGIN, session, buffer, len); };
  		GPacketHandler[PKT_S_CREATE_ROOM] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_CREATE_ROOM>(Handle_S_CREATE_ROOM, session, buffer, len); };
  		GPacketHandler[PKT_S_ENTER_ROOM] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_ENTER_ROOM>(Handle_S_ENTER_ROOM, session, buffer, len); };
  		GPacketHandler[PKT_S_READY] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_READY>(Handle_S_READY, session, buffer, len); };
  		GPacketHandler[PKT_S_START] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_START>(Handle_S_START, session, buffer, len); };
  		GPacketHandler[PKT_S_MOVE] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_MOVE>(Handle_S_MOVE, session, buffer, len); };
  		GPacketHandler[PKT_S_ATTACK] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_ATTACK>(Handle_S_ATTACK, session, buffer, len); };
  		GPacketHandler[PKT_S_ATTACKED] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_ATTACKED>(Handle_S_ATTACKED, session, buffer, len); };
  		GPacketHandler[PKT_S_LOSE] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_LOSE>(Handle_S_LOSE, session, buffer, len); };
  		GPacketHandler[PKT_S_WIN] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_WIN>(Handle_S_WIN, session, buffer, len); };
  	}
  
  	static bool HandlePacket(PacketSessionRef& session, BYTE* buffer, int32 len)
  	{
  		PacketHeader* header = reinterpret_cast<PacketHeader*>(buffer);
  		return GPacketHandler[header->id](session, buffer, len);
  	}
  	static SendBufferRef MakeSendBuffer(Protocol::C_SIGNUP& pkt) { return MakeSendBuffer(pkt, PKT_C_SIGNUP); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_LOGIN& pkt) { return MakeSendBuffer(pkt, PKT_C_LOGIN); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_CREATE_ROOM& pkt) { return MakeSendBuffer(pkt, PKT_C_CREATE_ROOM); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_ENTER_ROOM& pkt) { return MakeSendBuffer(pkt, PKT_C_ENTER_ROOM); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_READY& pkt) { return MakeSendBuffer(pkt, PKT_C_READY); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_START& pkt) { return MakeSendBuffer(pkt, PKT_C_START); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_MOVE& pkt) { return MakeSendBuffer(pkt, PKT_C_MOVE); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_ATTACK& pkt) { return MakeSendBuffer(pkt, PKT_C_ATTACK); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_ATTACKED& pkt) { return MakeSendBuffer(pkt, PKT_C_ATTACKED); }
  
  private:
  	template<typename PacketType, typename ProcessFunc>
  	static bool HandlePacket(ProcessFunc func, PacketSessionRef& session, BYTE* buffer, int32 len)
  	{
  		PacketType pkt;
  		if (pkt.ParseFromArray(buffer + sizeof(PacketHeader), len - sizeof(PacketHeader)) == false)
  			return false;
  
  		return func(session, pkt);
  	}
  
  	template<typename T>
  	static SendBufferRef MakeSendBuffer(T& pkt, uint16 pktId)
  	{
  		const uint16 dataSize = static_cast<uint16>(pkt.ByteSizeLong());
  		const uint16 packetSize = dataSize + sizeof(PacketHeader);
  
  		SendBufferRef sendBuffer = GSendBufferManager->Open(packetSize);
  		PacketHeader* header = reinterpret_cast<PacketHeader*>(sendBuffer->Buffer());
  		header->size = packetSize;
  		header->id = pktId;
  		ASSERT_CRASH(pkt.SerializeToArray(&header[1], dataSize));
  		sendBuffer->Close(packetSize);
  
  		return sendBuffer;
  	}
  };
  C:Enum.pb.h
  1개 파일이 복사되었습니다.
  C:Enum.pb.cc
  1개 파일이 복사되었습니다.
  C:Ingame.pb.h
  1개 파일이 복사되었습니다.
  C:Ingame.pb.cc
  1개 파일이 복사되었습니다.
  C:Protocol.pb.h
  1개 파일이 복사되었습니다.
  C:Protocol.pb.cc
  1개 파일이 복사되었습니다.
  C:ClientPacketHandler.h
  1개 파일이 복사되었습니다.
  C:Enum.pb.h
  1개 파일이 복사되었습니다.
  C:Enum.pb.cc
  1개 파일이 복사되었습니다.
  C:Ingame.pb.h
  1개 파일이 복사되었습니다.
  C:Ingame.pb.cc
  1개 파일이 복사되었습니다.
  C:Protocol.pb.h
  1개 파일이 복사되었습니다.
  C:Protocol.pb.cc
  1개 파일이 복사되었습니다.
  C:ServerPacketHandler.h
  1개 파일이 복사되었습니다.
  C:\Users\master\Desktop\chatting_server\chatting_server\chatting_server\Common\Protobuf\bin\Enum.pb.h
  지정된 파일을 찾을 수 없습니다.
  계속하려면 아무 키나 누르십시오 . . . 
  Enum.pb.cc
  Ingame.pb.cc
C:\Users\master\Desktop\chatting_server\chatting_server\chatting_server\DummyClient\Ingame.pb.cc(162,71): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\master\Desktop\chatting_server\chatting_server\chatting_server\DummyClient\Ingame.pb.cc(169,71): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\master\Desktop\chatting_server\chatting_server\chatting_server\DummyClient\Ingame.pb.cc(176,64): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
  Protocol.pb.cc
  DummyClient.cpp
  ServerPacketHandler.cpp
C:\Users\master\Desktop\chatting_server\chatting_server\chatting_server\DummyClient\ServerPacketHandler.cpp(46,26): warning C4244: '=': 'google::protobuf::uint64'에서 'int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
  코드를 생성하고 있습니다.
  1 of 3269 functions (<0.1%) were compiled, the rest were copied from previous compilation.
    0 functions were new in current compilation
    1 functions had inline decision re-evaluated but remain unchanged
  코드를 생성했습니다.
  DummyClient.vcxproj -> C:\Users\master\Desktop\chatting_server\chatting_server\chatting_server\Binary\Release\DummyClient.exe
